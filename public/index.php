<?php
// Mini-routeur basique via ?r=controller/action

// Charge l'autoload Composer pour r√©cup√©rer les classes du projet
require_once __DIR__ . '/../vendor/autoload.php';

use App\Core\Http;
use App\Controllers\HomeController;
use App\Controllers\AuthController;
use App\Controllers\ListController;


// Charge la configuration de l'application
if (!defined('APP_DEBUG')) {
    define('APP_DEBUG', \AppConfig::DEBUG_MODE);
}

// Configure l'affichage des erreurs en fonction du mode debug
ini_set('session.gc_maxlifetime', (string)\AppConfig::SESSION_LIFETIME);

// D√©marre la session avec des options s√©curis√©es
$secure = !empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off';
session_start([
    'cookie_lifetime' => \AppConfig::SESSION_LIFETIME,
    'cookie_httponly' => true,
    'cookie_samesite' => 'Lax',
    'cookie_domain'   => \AppConfig::SESSION_DOMAIN,
    'use_strict_mode' => true,
    'cookie_secure'   => $secure, // üëà ajout√©
]);





// Parse le param√®tre ?r=controller/action et applique home/index par d√©faut
$r = $_GET['r'] ?? 'home/index';
[$controller, $action] = array_pad(explode('/', $r, 2), 2, 'index');

try {
    // Oriente vers le bon contr√¥leur puis l'action demand√©e
    switch ($controller) {
        case 'home':
            $ctrl = new HomeController();
            if ($action === 'about') $ctrl->about();
            else $ctrl->index();
            break;
        case 'auth':
            $ctrl = new AuthController();
            if ($action === 'login' && $_SERVER['REQUEST_METHOD'] === 'POST') $ctrl->login();
            elseif ($action === 'register' && $_SERVER['REQUEST_METHOD'] === 'POST') $ctrl->register();
            elseif ($action === 'register') $ctrl->showRegister();
            elseif ($action === 'logout') $ctrl->logout();
            else $ctrl->showLogin();
            break;
        case 'lists':
            $ctrl = new ListController();
            if ($action === 'index') $ctrl->index();
            elseif ($action === 'form') $ctrl->form();
            elseif ($action === 'saveList') $ctrl->saveList();
            elseif ($action === 'saveItem') $ctrl->saveItem();
            elseif ($action === 'deleteItem') $ctrl->deleteItem();
            elseif ($action === 'updateItemStatus') $ctrl->updateItemStatus();
            else Http::abort(404);                 
            break;
        case 'admin':
            $ctrl = new \App\Controllers\AdminDashboardController();
            if ($action === 'dashboard') {
                $ctrl->index();
            } else {
                Http::abort(404);
            }
            break;


        default:
            Http::abort(404);
    }
} catch (\Throwable $e) {
    // En dev : afficher l'erreur
    if (\AppConfig::DEBUG_MODE) {
        throw $e;
    }
    // En prod : log + page 500
    error_log($e);
    Http::abort(500);
}



/* 
Note : pour une vraie appli, utiliser un vrai routeur (FastRoute, Symfony Routing, etc.)
et un vrai framework MVC (Laravel, Symfony, etc.) pour plus de s√©curit√© et de fonctionnalit√©s. 
Ceci est un exemple tr√®s simplifi√© pour illustrer le concept.
Ne pas oublier de prot√©ger les pages priv√©es (ex: listes) via un middleware ou dans les contr√¥leurs.
Ne pas oublier de valider/sanitizer les entr√©es utilisateurs (ex: via filter_input, htmlspecialchars, etc.)
Ne pas oublier de prot√©ger contre CSRF (ex: via un token dans les formulaires)
Ne pas oublier de prot√©ger contre les injections SQL (ex: via des requ√™tes pr√©par√©es PDO)
Ne pas oublier de g√©rer les sessions de mani√®re s√©curis√©e (ex: session_start avec des options s√©curis√©es)
Ne pas oublier de g√©rer les erreurs et exceptions de mani√®re appropri√©e (ex: try/catch, logging, etc.)   
Ne pas oublier de configurer correctement le serveur web (ex: Apache, Nginx) pour la r√©√©criture d'URL et la s√©curit√©
Ne pas oublier de configurer correctement les permissions des fichiers et dossiers (ex: chmod, chown) pour la s√©curit√©
Ne pas oublier de tester l'application de mani√®re approfondie (ex: tests unitaires, tests fonctionnels, tests de s√©curit√©, etc.)
Ne pas oublier de documenter le code et l'architecture de l'application pour faciliter la maintenance et l'√©volution future.
Ne pas oublier de suivre les bonnes pratiques de d√©veloppement (ex: PSR, SOLID, DRY, KISS, YAGNI, etc.)
Ne pas oublier de mettre en place un syst√®me de d√©ploiement et de mise √† jour (ex: CI/CD, Docker, etc.)
Ne pas oublier de surveiller et d'analyser les performances et la s√©curit√© de l'application en production (ex: logs, monitoring, alerting, etc.)
Ne pas oublier de sauvegarder r√©guli√®rement les donn√©es importantes (ex: base de donn√©es, fichiers, etc.)
Ne pas oublier de respecter les lois et r√©gulations en vigueur (ex: RGPD, CCPA, etc.) concernant la vie priv√©e et la protection des donn√©es utilisateurs.
Ne pas oublier de consulter la documentation officielle et les ressources en ligne pour approfondir ses connaissances et rester √† jour avec les √©volutions technologiques.
Ne pas oublier de demander de l'aide ou des conseils √† la communaut√© ou √† des experts si n√©cessaire.
Ne pas oublier de prendre du recul et de r√©fl√©chir √† l'architecture globale et aux choix technologiques pour garantir la p√©rennit√© et la scalabilit√© de l'application. 
*/
